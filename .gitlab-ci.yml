stages:
  - lint
  - create_infra
  - deploy

default:
  image: ubuntu:latest

variables:
  TF_SOURCES_DIR: "$CI_PROJECT_DIR/terraform"

.terraform_installation_template: &terraform_installation_template
  before_script:
    - apt update
    - apt install -y wget unzip tree
    - wget https://releases.hashicorp.com/terraform/1.6.5/terraform_1.6.5_linux_amd64.zip
    - tree -a "$CI_PROJECT_DIR"
    - mv terraform /usr/local/bin/
    - cp "$TF_SOURCES_DIR/.terraformrc" ~/
    - terraform init

lint-terraform:
  stage: lint
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - terraform/*
  before_script:
    - apt update && apt install -y curl unzip
    - curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
  script:
    - tflint --chdir=$TF_SOURCES_DIR --minimum-failure-severity=error

terraform-plan:
  stage: create_infra
  <<: *terraform_installation_template
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
  script:
    - terraform --chdir=$TF_SOURCES_DIR validate
    - terraform --chdir=$TF_SOURCES_DIR plan

terraform-apply:
  stage: create_infra
  <<: *terraform_installation_template
  when: manual
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
  script:
    - terraform --chdir=$TF_SOURCES_DIR apply -auto-approve

terraform-destroy:
  stage: create_infra
  <<: *terraform_installation_template
  when: manual
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
  script:
    - terraform --chdir=$TF_SOURCES_DIR destroy -auto-approve
